[
  {
    "title": "Array Sum",
    "statement": "Given an array of integers, calculate and return the sum of all elements.",
    "inputFormat": "First line: n (size of array)\nSecond line: n space-separated integers",
    "outputFormat": "Single integer representing the sum",
    "constraints": "1 <= n <= 10^5\n-10^9 <= arr[i] <= 10^9",
    "samples": [
      {
        "input": "5\n1 2 3 4 5",
        "output": "15",
        "explanation": "1 + 2 + 3 + 4 + 5 = 15"
      },
      {
        "input": "3\n-1 0 1",
        "output": "0",
        "explanation": "-1 + 0 + 1 = 0"
      }
    ],
    "hiddenTests": [
      {
        "input": "4\n10 20 30 40",
        "output": "100"
      },
      {
        "input": "2\n-5 5",
        "output": "0"
      }
    ],
    "timeLimitMs": 1000,
    "memoryLimitMB": 128
  },
  {
    "title": "Find Maximum Element",
    "statement": "Given an array of integers, find and return the maximum element.",
    "inputFormat": "First line: n (size of array)\nSecond line: n space-separated integers",
    "outputFormat": "Single integer representing the maximum element",
    "constraints": "1 <= n <= 10^5\n-10^9 <= arr[i] <= 10^9",
    "samples": [
      {
        "input": "5\n3 7 2 9 1",
        "output": "9",
        "explanation": "The maximum element in the array is 9"
      },
      {
        "input": "4\n-5 -2 -8 -1",
        "output": "-1",
        "explanation": "The maximum element among negative numbers is -1"
      }
    ],
    "hiddenTests": [
      {
        "input": "6\n100 50 200 75 150 25",
        "output": "200"
      },
      {
        "input": "1\n42",
        "output": "42"
      }
    ],
    "timeLimitMs": 1000,
    "memoryLimitMB": 128
  },
  {
    "title": "Palindrome Check",
    "statement": "Given a string, determine if it is a palindrome (reads the same forwards and backwards). Consider only alphanumeric characters and ignore case.",
    "inputFormat": "A single string",
    "outputFormat": "YES if palindrome, NO otherwise",
    "constraints": "1 <= string length <= 10^5",
    "samples": [
      {
        "input": "racecar",
        "output": "YES",
        "explanation": "racecar reads the same forwards and backwards"
      },
      {
        "input": "hello",
        "output": "NO",
        "explanation": "hello is not a palindrome"
      }
    ],
    "hiddenTests": [
      {
        "input": "A man a plan a canal Panama",
        "output": "YES"
      },
      {
        "input": "race a car",
        "output": "NO"
      }
    ],
    "timeLimitMs": 1000,
    "memoryLimitMB": 128
  },
  {
    "title": "Count Vowels",
    "statement": "Given a string, count the number of vowels (a, e, i, o, u) in it. Case insensitive.",
    "inputFormat": "A single string",
    "outputFormat": "Single integer representing the count of vowels",
    "constraints": "1 <= string length <= 10^5",
    "samples": [
      {
        "input": "hello world",
        "output": "3",
        "explanation": "The vowels are: e, o, o"
      },
      {
        "input": "AEIOU",
        "output": "5",
        "explanation": "All characters are vowels"
      }
    ],
    "hiddenTests": [
      {
        "input": "programming",
        "output": "3"
      },
      {
        "input": "xyz",
        "output": "0"
      }
    ],
    "timeLimitMs": 1000,
    "memoryLimitMB": 128
  },
  {
    "title": "Fibonacci Number",
    "statement": "Calculate the nth Fibonacci number. The Fibonacci sequence is: 0, 1, 1, 2, 3, 5, 8, 13, ...",
    "inputFormat": "Single integer n (0-indexed)",
    "outputFormat": "The nth Fibonacci number",
    "constraints": "0 <= n <= 30",
    "samples": [
      {
        "input": "5",
        "output": "5",
        "explanation": "F(5) = 5 (sequence: 0,1,1,2,3,5)"
      },
      {
        "input": "0",
        "output": "0",
        "explanation": "F(0) = 0"
      }
    ],
    "hiddenTests": [
      {
        "input": "10",
        "output": "55"
      },
      {
        "input": "7",
        "output": "13"
      }
    ],
    "timeLimitMs": 1000,
    "memoryLimitMB": 128
  },
  {
    "title": "Prime Number Check",
    "statement": "Given an integer n, determine if it is a prime number. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.",
    "inputFormat": "Single integer n",
    "outputFormat": "YES if prime, NO otherwise",
    "constraints": "1 <= n <= 10^6",
    "samples": [
      {
        "input": "7",
        "output": "YES",
        "explanation": "7 is only divisible by 1 and 7"
      },
      {
        "input": "4",
        "output": "NO",
        "explanation": "4 is divisible by 1, 2, and 4"
      }
    ],
    "hiddenTests": [
      {
        "input": "17",
        "output": "YES"
      },
      {
        "input": "1",
        "output": "NO"
      }
    ],
    "timeLimitMs": 1000,
    "memoryLimitMB": 128
  },
  {
    "title": "Reverse Array",
    "statement": "Given an array of integers, reverse it in-place and return the reversed array.",
    "inputFormat": "First line: n (size of array)\nSecond line: n space-separated integers",
    "outputFormat": "n space-separated integers in reversed order",
    "constraints": "1 <= n <= 10^5\n-10^9 <= arr[i] <= 10^9",
    "samples": [
      {
        "input": "5\n1 2 3 4 5",
        "output": "5 4 3 2 1",
        "explanation": "The array is reversed"
      },
      {
        "input": "3\n10 20 30",
        "output": "30 20 10",
        "explanation": "The array [10,20,30] becomes [30,20,10]"
      }
    ],
    "hiddenTests": [
      {
        "input": "4\n-1 -2 -3 -4",
        "output": "-4 -3 -2 -1"
      },
      {
        "input": "1\n42",
        "output": "42"
      }
    ],
    "timeLimitMs": 1000,
    "memoryLimitMB": 128
  },
  {
    "title": "Binary Search",
    "statement": "Given a sorted array of integers and a target value, return the index of the target if found. If not found, return -1.",
    "inputFormat": "First line: n (size of array)\nSecond line: n space-separated integers (sorted)\nThird line: target integer",
    "outputFormat": "Index of target (0-indexed) or -1 if not found",
    "constraints": "1 <= n <= 10^5\n-10^9 <= arr[i], target <= 10^9\nArray is sorted in ascending order",
    "samples": [
      {
        "input": "5\n1 3 5 7 9\n5",
        "output": "2",
        "explanation": "5 is at index 2"
      },
      {
        "input": "4\n2 4 6 8\n3",
        "output": "-1",
        "explanation": "3 is not in the array"
      }
    ],
    "hiddenTests": [
      {
        "input": "6\n10 20 30 40 50 60\n40",
        "output": "3"
      },
      {
        "input": "3\n1 2 3\n4",
        "output": "-1"
      }
    ],
    "timeLimitMs": 1000,
    "memoryLimitMB": 128
  },
  {
    "title": "Count Duplicates",
    "statement": "Given an array of integers, count how many elements appear more than once.",
    "inputFormat": "First line: n (size of array)\nSecond line: n space-separated integers",
    "outputFormat": "Single integer representing count of duplicate elements",
    "constraints": "1 <= n <= 10^5\n-10^9 <= arr[i] <= 10^9",
    "samples": [
      {
        "input": "6\n1 2 2 3 3 3",
        "output": "2",
        "explanation": "2 and 3 appear more than once"
      },
      {
        "input": "5\n1 2 3 4 5",
        "output": "0",
        "explanation": "No duplicates"
      }
    ],
    "hiddenTests": [
      {
        "input": "7\n5 5 5 1 2 2 3",
        "output": "2"
      },
      {
        "input": "4\n1 1 1 1",
        "output": "1"
      }
    ],
    "timeLimitMs": 2000,
    "memoryLimitMB": 256
  },
  {
    "title": "String Compression",
    "statement": "Implement basic string compression using counts of repeated characters. For example, 'aabcccccaaa' becomes 'a2b1c5a3'. If compressed string is not smaller, return original.",
    "inputFormat": "A single string",
    "outputFormat": "Compressed string or original if compression doesn't reduce size",
    "constraints": "1 <= string length <= 10^5\nString contains only uppercase and lowercase letters",
    "samples": [
      {
        "input": "aabcccccaaa",
        "output": "a2b1c5a3",
        "explanation": "Each character followed by its count"
      },
      {
        "input": "abc",
        "output": "abc",
        "explanation": "Compressed would be 'a1b1c1' which is longer"
      }
    ],
    "hiddenTests": [
      {
        "input": "aaabbb",
        "output": "a3b3"
      },
      {
        "input": "abcd",
        "output": "abcd"
      }
    ],
    "timeLimitMs": 1000,
    "memoryLimitMB": 128
  },
  {
    "title": "Missing Number",
    "statement": "Given an array containing n distinct numbers from 0 to n, find the one number that is missing from the array.",
    "inputFormat": "First line: n\nSecond line: n space-separated integers",
    "outputFormat": "The missing number",
    "constraints": "1 <= n <= 10^4",
    "samples": [
      {
        "input": "3\n0 1 3",
        "output": "2",
        "explanation": "The array should contain [0,1,2,3] but 2 is missing"
      },
      {
        "input": "2\n0 1",
        "output": "2",
        "explanation": "The array should contain [0,1,2] but 2 is missing"
      }
    ],
    "hiddenTests": [
      {
        "input": "5\n0 1 2 3 5",
        "output": "4"
      },
      {
        "input": "1\n1",
        "output": "0"
      }
    ],
    "timeLimitMs": 1000,
    "memoryLimitMB": 128
  },
  {
    "title": "Merge Sorted Arrays",
    "statement": "Given two sorted arrays, merge them into a single sorted array.",
    "inputFormat": "First line: n (size of first array)\nSecond line: n space-separated integers (sorted)\nThird line: m (size of second array)\nFourth line: m space-separated integers (sorted)",
    "outputFormat": "All elements in sorted order, space-separated",
    "constraints": "0 <= n, m <= 10^5\n-10^9 <= arr[i] <= 10^9",
    "samples": [
      {
        "input": "3\n1 3 5\n3\n2 4 6",
        "output": "1 2 3 4 5 6",
        "explanation": "Merge [1,3,5] and [2,4,6]"
      },
      {
        "input": "2\n1 2\n0\n",
        "output": "1 2",
        "explanation": "Second array is empty"
      }
    ],
    "hiddenTests": [
      {
        "input": "4\n1 5 9 10\n4\n2 3 8 12",
        "output": "1 2 3 5 8 9 10 12"
      },
      {
        "input": "0\n\n3\n7 8 9",
        "output": "7 8 9"
      }
    ],
    "timeLimitMs": 2000,
    "memoryLimitMB": 256
  }
]
